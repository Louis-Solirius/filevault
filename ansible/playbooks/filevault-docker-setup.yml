---
- name: Set up Docker and deploy the FileVault stack with Docker Compose
  hosts: filevault-app-servers
  become: yes

  vars_files:
    - ../vault.yml

  vars:
    deploy_dir: /opt/filevault
    acr_login_server: "lwweaponofchoicecr.azurecr.io"
    acr_username: "lwweaponofchoicecr"
    container_name: "filevault-app-clean"
    container_port: 3000
    host_port: 8080
    prometheus_host_port: 9090
    grafana_host_port: 3001

  tasks:
    - name: Install aptitude
      ansible.builtin.apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Install docker-compose
      ansible.builtin.apt:
        name: docker-compose
        state: latest
        update_cache: true

    - name: Create deployment directory
      file:
        path: "{{ deploy_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755' #NOSONAR

    - name: Template docker-compose file to target
      template:
        src: ../../docker-compose.yml
        dest: "{{ deploy_dir }}/docker-compose.yml"
        owner: root
        group: root
        mode: '0644' #NOSONAR

    - name: Copy Prometheus configuration file to target
      copy:
        src: ../../prometheus.yml
        dest: "{{ deploy_dir }}/prometheus.yml"
        owner: root
        group: root
        mode: '0644' #NOSONAR

    - name: Log into Azure Container Registry
      shell: >
        docker login {{ acr_login_server }}
        -u {{ acr_username }}
        -p {{ acr_password }}
      register: acr_login_result
      changed_when: "'Login Succeeded' not in acr_login_result.stdout"

    - name: Pull latest image
      ansible.builtin.command: docker compose pull
      args:
        chdir: "{{ deploy_dir }}"
      environment:
        DOCKER_HOST: "unix:///var/run/docker.sock"

    - name: Download CloudFlare Tunnel package
      ansible.builtin.get_url:
        url: "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb"
        dest: "/tmp/cloudflared.deb"
        mode: '0644' #NOSONAR

    - name: Install CloudFlare Tunnel package
      ansible.builtin.apt:
        deb: "/tmp/cloudflared.deb"
        state: present

    - name: Install CloudFlare Tunnel service
      ansible.builtin.shell: "cloudflared service install {{ cloudflared_token }}"
      args:
        creates: "/etc/systemd/system/cloudflared.service"

    - name: Launch docker compose
      ansible.builtin.command: docker compose up -d
      args:
        chdir: "{{ deploy_dir }}"
      environment:
        DOCKER_HOST: "unix:///var/run/docker.sock"
